// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(NakliyatDbContext))]
    [Migration("20231004145738_mig_3")]
    partial class mig_3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34385d9b-3007-4495-9844-09bd81e79ad6"),
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(2896),
                            CustomerName = "Customer1",
                            CustomerSurname = "Surname",
                            Email = "user1@gmail.com",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c08a3f28-96ae-4537-b0c2-bec1c2749dab"),
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(2900),
                            CustomerName = "Customer2",
                            CustomerSurname = "Surname",
                            Email = "user2@gmail.com",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("67cf3bbf-1527-4148-87c8-69e52d73782b"),
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(2902),
                            CustomerName = "Customer3",
                            CustomerSurname = "Surname",
                            Email = "user3@gmail.com",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9e0e4943-5289-4349-b6dc-0986852ff466"),
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(2920),
                            CustomerName = "Customer4",
                            CustomerSurname = "Surname",
                            Email = "user4@gmail.com",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cf8605e4-b807-451f-9f4e-99f4693e779d"),
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(2921),
                            CustomerName = "Customer5",
                            CustomerSurname = "Surname",
                            Email = "user5@gmail.com",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ekip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AracImgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AracName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AracPlakasi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EkipLead")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EkipName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EkipRank")
                        .HasColumnType("integer");

                    b.Property<string>("EkipTelNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EkipYorumSayisi")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("durum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Ekipler");
                });

            modelBuilder.Entity("Domain.Entities.TasimaTalebi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Baslangic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bitis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EsyaImgUrl")
                        .HasColumnType("text");

                    b.Property<int>("Mesafe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TasimaTalebleri");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd0a0866-3548-4623-9a55-48e4eee962fb"),
                            Aciklama = "tasimatalebi1",
                            Baslangic = "istanbul",
                            Bitis = "kars",
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(3412),
                            EsyaImgUrl = "laptop.jpeg",
                            Mesafe = 150,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ba71d5e4-50a8-48bb-ae1d-5659534cfb10"),
                            Aciklama = "tasimatalebi2",
                            Baslangic = "istanbul",
                            Bitis = "ardahan",
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(3415),
                            EsyaImgUrl = "laptop.jpeg",
                            Mesafe = 150,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7f5dbaae-bf3e-46fd-a74f-d304c536cfc7"),
                            Aciklama = "tasimatalebi3",
                            Baslangic = "istanbul",
                            Bitis = "igdir",
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(3416),
                            EsyaImgUrl = "laptop.jpeg",
                            Mesafe = 150,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c57ebd04-c36d-478b-b565-d98d4f556f6c"),
                            Aciklama = "tasimatalebi4",
                            Baslangic = "istanbul",
                            Bitis = "agri",
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(3418),
                            EsyaImgUrl = "laptop.jpeg",
                            Mesafe = 150,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("07ae3a52-f1f8-4414-afe9-200c93639b53"),
                            Aciklama = "tasimatalebi5",
                            Baslangic = "istanbul",
                            Bitis = "van",
                            CreatedDate = new DateTime(2023, 10, 4, 14, 57, 37, 859, DateTimeKind.Utc).AddTicks(3419),
                            EsyaImgUrl = "laptop.jpeg",
                            Mesafe = 150,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2b2548a0-7df9-4f77-b8ac-649a6eeaafa2",
                            ConcurrencyStamp = "dff694bd-8b74-46a4-a18e-86fec91eba1f",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "a9dea9cb-c482-4030-8bf8-024c216e4cbb",
                            ConcurrencyStamp = "65926663-618b-4ea1-b7ca-9f684be00cee",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "ffbd7256-2e04-477b-afb5-6a0030145bfe",
                            ConcurrencyStamp = "ddb91232-6a95-402d-a402-d85a1dc455e5",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "aae1f252-ca00-408e-b2fa-cfba2b7d2c76",
                            ConcurrencyStamp = "db9fb211-02ff-45a1-90ba-0302b3f3854a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
